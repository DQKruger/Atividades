#include <math.h>
#include <stdio.h>
#include <stdlib.h>

// TAD lista
typedef struct TipoNo {
  int chave;
} TipoNo;

typedef struct lista {
  TipoNo *itens;
  int ultimo;
  int tamanho;
} lista;

//Função inicaliza lista
int inicializa(lista *list) {
  list->ultimo = 0;
  list->tamanho = 10;
  list->itens = malloc(10 * sizeof(lista));
  if (list->itens == NULL)
    return -1;
  return 0;
}

// Função Inserir lista
int inserir(lista *list, int valor) {
  if (list->ultimo >= list->tamanho) {
    TipoNo *novaLista = (TipoNo *)malloc(2 * list->tamanho * sizeof(TipoNo));
    if (novaLista == NULL) {
      return -1;
    }
    for (int i = 0; i < list->ultimo; i++) {
      novaLista[i].chave = list->itens[i].chave;
    }
    free(list->itens);
    list->itens = novaLista;
    list->tamanho *= 2;
  }
  list->itens[list->ultimo].chave = valor;
  list->ultimo++;
  return 0;
}

//Função Imprime lista
void imprime(lista *list) {
  for (int i = 0; i < list->ultimo; i++)
    printf("%d ", list->itens[i].chave);
}

//Função Merge
void merge(int *V, int inicio, int meio, int fim) {
  int *temp, p1, p2, tamanho, i, j, k;
  int fim1 = 0, fim2 = 0;
  tamanho = fim - inicio + 1;
  p1 = inicio;
  p2 = meio + 1;
  temp = (int *)malloc(tamanho * sizeof(int));

  if (temp != NULL) {
    for (i = 0; i < tamanho; i++) {
      if (!fim1 && !fim2) {
        if (V[p1] < V[p2]) {
          temp[i] = V[p1++];
        } else
          temp[i] = V[p2++];

        if (p1 > meio)
          fim1 = 1;

        if (p2 > fim)
          fim2 = 1;
      } else {
        if (!fim1)
          temp[i] = V[p1++];
        else
          temp[i] = V[p2++];
      }
    }
    for (j = 0, k = inicio; j < tamanho; j++, k++)
      V[k] = temp[j];
  }
  free(temp);
}

//Função Merge Sort
void mergeSort(int *V, int inicio, int fim) {
  int meio;
  if (inicio < fim) {
    meio = floor((inicio + fim) / 2);
    mergeSort(V, inicio, meio);
    mergeSort(V, meio + 1, fim);
    merge(V, inicio, meio, fim);
  }
}

//Função principal
int main(void) {
  lista list;
  int r, t, Contador;
  inicializa(&list);

  scanf("%d", &t);
  for (int i = 0; i < t; i++) {
    scanf("%d", &r);
    inserir(&list, r);
  }

  mergeSort((int *)list.itens, 0, list.ultimo - 1);
  imprime(&list);

  Contador = log2(t) + 1;
  printf("\n%d", Contador);
  return 0;
}
